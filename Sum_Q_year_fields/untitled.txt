import os
import sys

# Исправление пути для импорта
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import config_to_connection
from DB_CONNECT import DatabaseConnector

class DataProcessor:
    def __init__(self, db_params):
        self.db_connector = DatabaseConnector(db_params)

    def connect(self):
        self.db_connector.connect()

    def create_result_table(self):
        query = """
    CREATE TABLE IF NOT EXISTS Q_with_coords (
        date_origin VARCHAR(4),
        Field INTEGER,
        Well TEXT,
        Sum_Q_prod FLOAT,
        coordx FLOAT,
        coordy FLOAT
        
    );
    """
        self.db_connector.execute_query(query, fetch_results=False)
#факт_часы_за_месяц__часы_раб
    def insert_data(self):
        query = """
    INSERT INTO Q_with_coords (date_origin, Field, Well, Sum_Q_prod, coordx, coordy)
    SELECT Insert_zapros.date_origin, 
           Insert_zapros.Field, 
           Insert_zapros.Well,
           MAX(Insert_zapros.Q_prod) AS Sum_Q_prod,
           MAX(Insert_zapros.coordx) AS coordx,
           MAX(Insert_zapros.coordy) AS coordy
            
    FROM
    
    (SELECT DISTINCT
        TO_CHAR(TO_DATE(to_tdp.name_of_date_doc_col, 'YYYY-MM-DD'), 'YYYY') AS date_origin,
        to_tdp.месторождение AS Field,
        to_tdp.скважина AS Well,
        COALESCE(NULLIF(to_tdp.факт_дебит_жидкости_м3_сут::text, 'NULL'), '0')::double precision*29.3 AS Q_prod,
        COALESCE(NULLIF(to_tdp.coordx::text, 'NULL'), '0')::double precision AS coordx,
        COALESCE(NULLIF(to_tdp.coordy::text, 'NULL'), '0')::double precision AS coordy

    FROM
        to_tdp AS to_tdp
    WHERE
        to_tdp.факт_дебит_жидкости_м3_сут IS NOT NULL
        AND to_tdp.факт_дебит_жидкости_м3_сут <> 'NULL'
        AND to_tdp.факт_дебит_жидкости_м3_сут <> '0'
        AND to_tdp.факт_дебит_жидкости_м3_сут <> '0.0'
        AND to_tdp.факт_дебит_жидкости_м3_сут <> 'nan'
        AND to_tdp.факт_дебит_жидкости_м3_сут <> 'NaN') AS Insert_zapros
    
    GROUP BY
           Insert_zapros.date_origin, 
           Insert_zapros.Field, 
           Insert_zapros.Well
           
    ORDER BY
           Insert_zapros.Field,
           Insert_zapros.date_origin;
    """
    
        self.db_connector.execute_query(query, fetch_results=False)
        self.db_connector.commit()
    
    def close(self):
        self.db_connector.close()

def create_table_Q_prod_and_inj():
    db_params = config_to_connection.db_params
    data_proc = DataProcessor(db_params)
    data_proc.connect()
    data_proc.create_result_table()
    data_proc.insert_data()
    data_proc.close()

    print("Таблицы созданы и данные вставлены успешно.")